import * as readline from "readline";

type Resolver<T> = (value: T) => void;

const input : readline.Interface = readline.createInterface({
	input: process.stdin,
	output: process.stdout,
	prompt: "+> "
});

const TsLint : string = `{
    "defaultSeverity": "error",
    "extends": [
        "tslint:recommended",
        "tslint-config-standard",
		"tslint-config-prettier"
    ],
    "jsRules": {},
    "rules": {
        "ordered-imports": false,
        "object-literal-sort-keys": false,
		"member-ordering": false,
		"no-magic-numbers": true,
		"typedef": [
			true,
			"call-signature",
			"arrow-call-signature",
			"parameter",
			"arrow-parameter",
			"property-decleration",
			"variable-declaration",
			"member-variable-declaration",
			"object-destructuring",
			"array-destructuring"
		],
		"max-line-length": [true, 120],
		"semicolon": true,
		"no-null-keyword": false
    },
    "rulesDirectory": []
}`;

function TsConfig(dir: string) : string {
	return `{
		"compilerOptions": {
			"module": "commonjs",
			"moduleResolution": "node",
			"pretty": true,
			"sourceMap": true,
			"target": "es6",
			"outDir": "./${dir}",
			"noImplicitAny": true,
			"strictFunctionTypes": true,
			"noImplicitThis": true,
			"alwaysStrict": true,
			"noImplicitReturns": true,
			"allowSyntheticDefaultImports": true,
			"noUnusedLocals": true,
			"strictPropertyInitialization": true,
			"strictNullChecks": true
		},
		"include": [
			"src/**/*"
		],
		"exclude": [
			"node_modules",
			"**/*.spec.ts"
		]
	}`;
}

const JestConfig : string = `module.exports = {
	preset: 'ts-jest',
	testEnvironment: 'node',
	globals: {
		'ts-jest': {
			tsConfig: "tsconfig.json"
		}
	},
};`;

const GitIgnore : string = `# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# next.js build output
.next
`;

async function ExecutablePackage(name : string) : Promise<string> {
	process.stdout.write("Description of project:\n");
	input.prompt();
	const desc : string = await getLine();
	return `{
	"name": "${name}",
	"version": "1.0.0",
	"description": "${desc}",
	"main": "./dist/index.js",
	"scripts": {
		"start": "npm run lint && tsc -p . && node bin/index.js",
		"build": "npm run lint && tsc -p .",
		"test": "jest",
		"lint": "tslint src/**/*.ts && tslint tests/**/*.ts"
	},
	"repository": {
		"type": "git",
		"url": "git+https://github.com/collatedev/${name}.git"
	},
	"author": "Evan Coulson",
	"license": "MIT",
	"bugs": {
		"url": "https://github.com/collatedev/${name}/issues"
	},
	"homepage": "https://github.com/collatedev/${name}#readme",
	"devDependencies": {
		"@types/jest": "24.0.15",
		"ts-jest": "24.0.2",
		"jest": "24.8.0",
		"tslint": "^5.13.0",
		"tslint-config-prettier": "^1.18.0",
		"tslint-config-standard": "^8.0.1"
	},
	"dependencies": {
		"@types/node": "^11.9.5",
		"ts-node": "^8.0.2",
		"typescript": "^3.3.3333",
		"nodemon": "^1.18.10"
	}
}`;
} 

async function LibraryPackage(name : string) : Promise<string> {
	process.stdout.write("Description of project:\n");
	input.prompt();
	const desc : string = await getLine();
	return `{
	"name": "${name}",
	"version": "1.0.0",
	"description": "${desc}",
	"main": "./dist/index.js",
	"scripts": {
		"build": "npm run lint && tsc -p .",
		"test": "jest",
		"lint": "tslint src/**/*.ts && tslint tests/**/*.ts"
	},
	"repository": {
		"type": "git",
		"url": "git+https://github.com/collatedev/${name}.git"
	},
	"author": "Evan Coulson",
	"license": "MIT",
	"bugs": {
		"url": "https://github.com/collatedev/${name}/issues"
	},
	"homepage": "https://github.com/collatedev/${name}#readme",
	"devDependencies": {
		"@types/jest": "24.0.15",
		"ts-jest": "24.0.2",
		"jest": "24.8.0",
		"tslint": "^5.13.0",
		"tslint-config-prettier": "^1.18.0",
		"tslint-config-standard": "^8.0.1"
	},
	"dependencies": {
		"@types/node": "^11.9.5",
		"ts-node": "^8.0.2",
		"typescript": "^3.3.3333",
	}
}`;
} 

async function getLine() : Promise<string> {
	return new Promise((resolve : Resolver<string>) : void => {
		input.on('line', (line : string) : void => {
			resolve(line);
		});
	});
}

export {
	TsLint, 
	TsConfig, 
	GitIgnore, 
	ExecutablePackage, 
	LibraryPackage,
	JestConfig
};